{"version":3,"file":"task.Controller.js","sourceRoot":"","sources":["../../src/controlles/task.Controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport { Task } from \"models/Task\";\n\nlet tasks: Task[] = [];\nlet currentId: number = 1;\n\nexport const createTask = (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { title }: { title: string } = req.body;\n\n    if (!title) {\n      return res.status(400).send({ message: \"Title is required\" });\n    }\n    const newTask: Task = {\n      id: currentId++,\n      title,\n      completed: false,\n    };\n\n    tasks.push(newTask);\n\n    res.status(201).send({ message: \"Task created\", task: newTask });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getTasks = (req: Request, res: Response, next: NextFunction) => {\n  try {\n    res.send({ message: \"All tasks\", tasks });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getTaskById = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const id: number = Number(req.params.id);\n\n    if (isNaN(id)) {\n      return res.status(400).send({ message: \"Id is invalid\" });\n    }\n\n    const task = tasks.find((currTask) => currTask.id === id);\n\n    if (!task) {\n      return res.status(404).send({ message: \"Task not found\" });\n    }\n\n    res.send({ message: \"Current task: \", task });\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Для PATCH (частичное обновление)\ntype TaskUpdate = Partial<Pick<Task, \"title\" | \"completed\">>;\n\n// Для PUT (полная замена)\ntype TaskReplace = Pick<Task, \"title\" | \"completed\">;\n\nexport const patchTask = (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const id = Number(req.params.id);\n    if (isNaN(id)) return res.status(400).json({ message: \"Id is invalid\" });\n\n    const index = tasks.findIndex((t) => t.id === id);\n    if (index === -1)\n      return res.status(404).json({ message: \"Task not found\" });\n\n    const body: TaskUpdate = req.body;\n\n    Object.assign(tasks[index], body);\n\n    res.json({ message: \"Task partially updated\", task: tasks[index] });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const putTask = (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const id = Number(req.params.id);\n    if (isNaN(id)) return res.status(400).json({ message: \"Id is invalid\" });\n\n    const index = tasks.findIndex((t) => t.id === id);\n    if (index === -1)\n      return res.status(404).json({ message: \"Task not found\" });\n\n    const { title, completed }: TaskReplace = req.body;\n\n    if (title === undefined || completed === undefined) {\n      return res\n        .status(400)\n        .json({ message: \"All fields are required for PUT\" });\n    }\n\n    tasks[index] = {\n      ...tasks[index],\n      title,\n      completed,\n    };\n\n    res.json({ message: \"Task fully updated\", task: tasks[index] });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const deleteTask = (req: Request, res: Response) => {\n  const id: number = Number(req.params.id);\n  tasks = tasks.filter((task) => task.id !== id);\n  res.status(204).send({ message: \"Task deleted\" });\n};\n"]}